openapi: 3.0.4
info:
  title: Task Management System
  description: |-
    This is a Task Management system which perform below tasks: 
    
    1. Retrieve a task by ID 
    2. Retrieve all tasks
    3. Update the status of a task
    4. Delete a task
    
  termsOfService: https://swagger.io/terms/
  contact:
    email: personalsonali21@gmail.com
  license:
    name: Copyright (C) 2005, SP
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
servers:
  - url: http://localhost:4000/
tags:
  - name: tasks
    description: Everything about your Tasks
    externalDocs:
      description: Find out more
      url: https://swagger.io
paths:
  /tasks:
    get:
      tags:
        - tasks
      summary: Get all Tasks
      description: Get all Tasks stored in DB
      operationId: getAllTasks
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response400'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response404'
        '500':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response500'
      security:
        - task_auth:
            - write:tasks
            - read:tasks
  /tasks/{id}:
    get:
      tags:
        - tasks
      summary: Find tasks by ID.
      description: Returns a task.
      operationId: getTaskById
      parameters:
        - name: id
          in: path
          description: ID of task to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response400'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response500'
        '500':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response404'
      security:
        - task_auth:
            - write:tasks
            - read:tasks
    delete:
      tags:
        - tasks
      summary: Deletes a task.
      description: Delete a task.
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          description: Task id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response400'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response404'
        '500':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response500'
      security:
        - task_auth:
            - write:tasks
            - read:tasks
  /tasks/{id}/status:
    put:
      tags:
        - tasks
      summary: Update status 
      description: Update status of the task.
      operationId: uploadStatus
      parameters:
        - name: id
          in: path
          description: ID of task to update
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: status of the task
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response400'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response404'
        '500':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response500'
      security:
        - task_auth:
            - write:tasks
            - read:tasks
components:
  schemas:
    Tasks:
      type: object
      properties:
        Task:
          $ref: '#/components/schemas/Task'
    Task:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Title1
        description:
          type: string
          example: Description
        status:
          type: string
          example: PENDING
        duedate:
          type: string
          example: 2025-08-15T17:00:00        
    response404:
      type: object
      properties:
        status:
          type: integer
          example: 404
        error:
          type: string
          example: Not Found
        message:
          type: string
          example: Task with id 6 not found
        date:
          type: string
          example: 2025-08-12T23:19:16.298437          
    response400:
      type: object
      properties:
        status:
          type: integer
          example: 400
        error:
          type: string
          example: Bad Request
        message:
          type: string
          example: Invalid Id
        date:
          type: string
          example: 2025-08-12T23:19:16.298437          
    response500:
      type: object
      properties:
        status:
          type: integer
          example: 500
        error:
          type: string
          example: Internal Server Error
        message:
          type: string
          example: An unexpected error occurred   
        date:
          type: string
          example: 2025-08-12T23:19:16.298437
  securitySchemes:
    task_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://tasks.auth/authorize
          scopes:
            "write:task": modify task
            "read:task": read your task
    api_key:
      type: apiKey
      name: api_key
      in: header